function flatten(tree) {
    return is_null(tree) ? null 
    : is_list(head(tree)) 
    ? append(flatten(head(tree)),flatten(tail(tree)))
    : pair(head(tree),flatten(tail(tree)));
}


const my_tree = list(10,2,list(list(4,list(50)),4),6);




function map_tree(f,tree) {
    return  map(x=>is_list(x)?map_tree(f,x) 
                    : f(x),tree);}



function accumulate_tree(op,initial,tree) {
    function g(x,y) { return is_list(x) ? op(accumulate_tree(op,initial,x),y)
                                        : op(x,y);}

    
  return accumulate(g,initial,tree);  
    
}




                              
function sum(xs) {
    return is_null(xs) ? 0 : head(xs)+sum(tail(xs));
}


function exist(xs,n) {
    if (sum(xs)<n) { return false;} //no need
    else if (sum(xs) === n) { return true;} // no need
    else if (is_null(xs)&&n===0) { return true;}
    else if (is_null(xs)) { return false;}
    else { return exist(tail(xs),n-head(xs)) ? true 
                           : exist(tail(xs),n);}
}


function exist2(xs,n) {
    if (is_null(xs)&&n===0) { return list(null);}
    else if (is_null(xs)) { return null;}
    else { const a = map(x=>pair(head(xs),x),exist2(tail(xs),n-head(xs)));
           const b = exist2(tail(xs),n);
           return append(a,b); }
}


exist2(list(1,3,6,7,8,19,20),61);


function partition(xs, p) {
    return pair(filter(x=>x<=p,xs),filter(x=>x>p,xs));
    
}



function quicksort(xs) { 
    if(is_null(xs)||is_null(tail(xs))) { return xs;}
    else { const parted = partition(tail(xs),head(xs));
    return append(quicksort(head(parted)),
             append(list(head(xs)),quicksort(tail(parted))));}
    
}





function min_diff(xs) {
    const sorted = reverse(quicksort(xs));
    
    function compare(xs,x) {
        return is_null(tail(xs)) ? x 
         : x<=head(xs) - head(tail(xs)) ? compare(tail(xs),x) : compare(tail(xs),head(xs) - head(tail(xs)));
    }

    
   return compare(tail(sorted),head(sorted)-head(tail(sorted)));
    
}


function is_subset(xs,ys) {
    return is_null(ys)? true 
                      :is_null(member(head(ys),xs)) 
                      ? false 
                      : is_subset(remove(head(ys),xs),tail(ys));
            
}


function find_consecutive(xs,a,b) {
    if (is_null(tail(tail(xs)))) { return head(xs) === head(tail(xs)) - 1 ? (b+1 < a? a : b+1) : (b<a?a:b);}
    else if (head(xs) === head(tail(xs))-1) { return find_consecutive(tail(xs),a,b+1);}
    else if (head(xs) === head(tail(xs)))   { return find_consecutive(tail(xs),a,b);}
    else { return a<b ? find_consecutive(tail(xs),b,1) : find_consecutive(tail(xs),a,1);}
}




function longest_consecutive(xs) {
    return find_consecutive(quicksort(xs),1,1);
}
//longest_consecutive(list(2,4,6,7,8,10));

function f(xs,k) {
    return is_null(xs) ? null 
    : head(xs) === k 
    ? f(tail(xs),k) 
    :pair(head(xs),f(tail(xs),head(xs)));
}



function unique(lst) {
    if (is_null(lst)||is_null(tail(lst))) { return lst;}
    else { return pair(head(lst),f(tail(lst),head(lst)));}
}


function stock(xs,a,b) {
    if (length(xs)===2) { return head(xs) <= head(tail(xs)) ? pair(a,b+1)  : pair(a,b);}
    else if (head(xs)<head(tail(xs))) { return stock(tail(xs),a,b+1);}
    else {return a === b ? stock(tail(xs),b+1,b+1):
    
    pair(pair(a,b),stock(tail(xs),b+1,b+1));}
}

function ordered_pairs(n) {
    return n === 0 ? null : pair(build_list(x=>pair(n,x),n),ordered_pairs(n-1));
}

function sub_list1(xs) { 
    return is_null(tail(xs)) ? list(list(head(xs))) : pair(list(head(xs)),map(x=>pair(head(xs),x),sub_list1(tail(xs))));
    
}


 
function sub_list2(xs) {
    return is_null(xs) ? list(null) : append(sub_list1(xs),sub_list2(tail(xs)));
}

function modulo(x,n) {
    return x-math_floor(x/n)*n; 
}

function sub_sum(lst,x) {
    return is_null(lst) ? pair(x,null) 
    : pair(x,sub_sum(tail(lst),x+head(lst)));
}




function modulo_list(xs,k) {
    return map(x=>modulo(x,k),xs);
}
 
 
function number(lst) {
    return is_null(lst) ? 0 : (length(filter(x=>x===head(lst),tail(lst)))+1)*(length(filter(x=>x===head(lst),tail(lst))))/2
             + number(remove_all(head(lst),lst));
}



function number_pairs(lst,k) {
    return number(modulo_list(sub_sum((lst),0),k));
}


//number_pairs(list(17,17,17,17),17);


function repeat(v,k) {
    return k === 0? null 
    :pair(v,repeat(v,k-1));
}



function expand(l,k) {
    return accumulate((x,y)=>append(repeat(x,k),y),null,l);
}

function expand_matrix(M,k) {
    function m(M,k) {
        return is_null(M) ? null : pair(repeat(expand(head(M),k),k),m(tail(M),k));
    }

  return accumulate(append,null,m(M,k));  
    
}
 
function split(xs,k,a) {
    return k === 0 ? pair(a,xs) : split(tail(xs),k-1,pair(head(xs),a));
}
//split(list(1,2,3,4,5,6),3,null);





function selector(xs,a,b) {
    return is_null(xs) ? pair(a,b) : head(xs) < a ? selector(tail(xs),head(xs),pair(a,b)) 
     : selector(tail(xs),a,pair(head(xs),b));
}
 

function is_tree_of_numbers(xs) {
    if (!is_list(xs)) { return false;}
    else { return accumulate((x,y)=>is_list(x)?is_tree_of_numbers(x)&&y
                                              : is_number(x) 
                                              ? y
                                              : false, true , xs);}

}



const tree_of_num = list(list(1, list(2,3,pair(1,2)),1,list(4)), 4, 1 , list(6, 7));

function insert(x,xs,cmp) {
    return is_null(xs) ? list(x) 
    :cmp(x,head(xs))
    ? pair(x,xs) 
    :pair(head(xs),insert(x,tail(xs),cmp));
 }
 
function insert_sort(xs,cmp) {
    return is_null(xs) ? xs 
    : insert(head(xs),insert_sort(tail(xs),cmp),cmp);
}





function sort_pairs(pl) { 
    const S = insert_sort(pl,(x,y)=>tail(x)>=tail(y));
    return insert_sort(S,(x,y)=>head(x)<=head(y));}


//sort_pairs(list(pair(3,4),pair(6,2),pair(3,2),pair(4,2),pair(3,7),pair(6,5),pair(6,4),pair(3,1)));


function insert_sort2(xs,cmp) {
    return accumulate((x,y)=>insert(x,y,cmp),null,xs);
}



//insert_sort2(list(3,4,1,2,5,6,7,9,98,1,0),(x,y)=>x<=y);


function d_append(xs, ys) {
    if (is_null(xs)) {
        return ys;
    } else {
        set_tail(xs, d_append(tail(xs), ys));
        return xs;
    }
}
const L = list(1, 2, 3);
//d_append(L, L); 

function map_pairs(f,p) { 
    return pair(f(head(p)),f(tail(p)));}
    
    
function map_pair_tress(f,p) {
    return map_pairs(x=>is_pair(x)?map_pair_tress(f,x):f(x),p);
}



const p = pair(pair(1,2),pair(1,pair(5,9)));


exist2(list(1,2,3,6,5,44,3,2),50);
